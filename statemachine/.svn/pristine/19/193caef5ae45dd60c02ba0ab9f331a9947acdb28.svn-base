package statemachine;

import java.lang.reflect.Field;
import java.util.concurrent.ThreadLocalRandom;

import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import egt.interactive.statemachine.States;
import egt.interactive.statemachine.VendingMachine;
import resources.MachineLoader;
import resources.ProductNames;

public class ComplexTests {

    VendingMachine machine;

    @BeforeMethod
    public void machineReset() {
	machine = new VendingMachine();
	MachineLoader.loadMachine(machine);
    }

    @Test
    public void aLotOfDifferentPurchasesShouldAddToMachineMoney()
	    throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {

	Long moneyCollected = 0L;

	machine.putCoins(ThreadLocalRandom.current().nextLong(500, 800));
	if (machine.selectItem("Kit-Kat") != null) {
	    moneyCollected += machine.getItemPrice("Kit-Kat");
	    machine.takeItem();
	}

	if (machine.selectItem("Kit-Kat") != null) {
	    moneyCollected += machine.getItemPrice("Kit-Kat");
	    machine.takeItem();
	}
	machine.returnMoney();
	Assert.assertTrue(machineIsInStandBy());

	machine.putCoins(ThreadLocalRandom.current().nextLong(500, 700));
	machine.returnMoney();

	Assert.assertTrue(machineIsInStandBy());

	machine.putCoins(ThreadLocalRandom.current().nextLong(500, 600));
	if (machine.selectItem("Coca-Cola") != null) {
	    moneyCollected += machine.getItemPrice("Coca-Cola");
	}
	;
	machine.takeItem();
	if (machine.selectItem("Snickers") != null) {
	    moneyCollected += machine.getItemPrice("Snickers");
	    machine.takeItem();
	}

	Long totalMoney = machine.getTotalMoney();

	Assert.assertEquals(totalMoney, moneyCollected);

    }

    @Test
    public void aLotOfDifferentOperationsAndThenErrorShouldStillHaveTotalMoney() {
	final ProductNames[] names = ProductNames.values();
	Long moneyCollected = 0L;
	machine.putCoins(ThreadLocalRandom.current().nextLong(20, 40));
	final int count = ThreadLocalRandom.current().nextInt(10, 20);
	for (int i = 0; i < count; i++) {
	    final int id = ThreadLocalRandom.current().nextInt(7);
	    if (machine.selectItem(names[id].getName()) != null) {
		moneyCollected += machine.getItemPrice(names[id].getName());
		machine.takeItem();
	    }
	}

	machine.service();

	Long totalMoney = machine.getTotalMoney();

	Assert.assertEquals(totalMoney, moneyCollected);
    }

    @Test
    public void addingNewItemThenBuyingAllOfItShouldRemoveIt() {
	VendingMachine machine = new VendingMachine();
	final int count = ThreadLocalRandom.current().nextInt(5, 30);

	machine.addProduct("Milka", 100L, count);
	machine.putCoins(ThreadLocalRandom.current().nextLong(10000, 20000));
	for (int i = 0; i < count; i++) {
	    Assert.assertTrue(machine.selectItem("Milka") != null);
	    machine.takeItem();
	}

	Assert.assertFalse(machine.selectItem("Milka") != null);
    }

    @Test
    public void buyAllProducts() {
	final int count = machine.getItemsCount();
	machine.putCoins(ThreadLocalRandom.current().nextLong(45000, 50000));
	final ProductNames[] names = ProductNames.values();
	boolean found = true;
	while (found) {
	    found = false;
	    for (int i = 0; i < count; i++) {
		if (machine.selectItem(names[i].getName()) != null) {
		    found = true;
		}
		machine.takeItem();
	    }
	}

	Assert.assertEquals(machine.getItemsCount(), 0);
    }

    private boolean machineIsInStandBy()
	    throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
	Class<? extends VendingMachine> c = machine.getClass();
	Field field = c.getDeclaredField("state");
	field.setAccessible(true);
	States state = (States) field.get(machine);

	return state.equals(States.STAND_BY);
    }

}
