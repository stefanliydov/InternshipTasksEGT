package statemachine;

import java.lang.reflect.Field;
import java.math.BigDecimal;

import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import egt.interactive.statemachine.States;
import egt.interactive.statemachine.VendingMachine;

public class ServiceStateTests {

    VendingMachine machine = new VendingMachine();

    @BeforeMethod
    public void addSomeCashInMachine() {
	machine.putCoins("Asdasd");

    }

    @Test
    public void machineShouldNotAcceptCoins() {
	Assert.assertFalse(machine.putCoins("1"));
    }

    @Test
    public void machineShouldNotSelectItem() {
	Assert.assertFalse(machine.selectItem("Kit-Kat"));
    }

    @Test
    public void machineShouldNotGiveItem() {
	Assert.assertFalse(machine.takeItem());
    }

    @Test
    public void machineShouldNotReturnMoney() {
	Assert.assertNull(null);
    }

    @Test
    public void machineShouldNotLetYouAddProductsWhileItsWorking() {
	Assert.assertFalse(machine.addProduct("dummyProduct", new BigDecimal(0.10), 1));
    }

    @Test
    public void machineShouldAcceptService() {
	Assert.assertTrue(machine.service());
    }

    @Test
    public void machineShouldGoBackToStandByAfterGettingServiced()
	    throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
	Assert.assertTrue(machine.service());

	Class<? extends VendingMachine> c = machine.getClass();
	Field field = c.getDeclaredField("state");
	field.setAccessible(true);
	States state = (States) field.get(machine);

	Assert.assertEquals(state, States.STAND_BY);
    }

}
