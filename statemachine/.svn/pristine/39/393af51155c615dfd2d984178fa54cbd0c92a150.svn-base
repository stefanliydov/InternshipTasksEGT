package egt.interactive.statemachine;

import java.math.BigDecimal;

public enum States {

    STAND_BY {
	/*
	 * The machine is ready for customers!
	 */
	@Override
	boolean putCoins(final VendingMachine machine, final String coin) {
	    BigDecimal money = null;
	    try {
		money = new BigDecimal(coin);
		if (BigDecimal.ZERO.compareTo(money) >= 0) {
		    throw new NumberFormatException();
		}
	    } catch (NumberFormatException e) {
		ConsoleWriter.write("A fatal error has occured while machine was operating. Please call service!");
		machine.setState(States.SERVICE);
		return false;
	    }
	    machine.addCoinsToMachine(money);
	    ConsoleWriter.write(machine.toString());
	    machine.setState(States.SELECTING_ITEM);
	    return true;
	}

	@Override
	boolean selectItem(final VendingMachine machine, final String name) {
	    return false;
	}

	@Override
	boolean takeItem(final VendingMachine machine) {
	    return false;
	}

	@Override
	boolean service(final VendingMachine machine) {
	    return false;
	}

	@Override
	boolean returnMoney(final VendingMachine machine) {
	    return false;
	}

	@Override
	boolean addProduct(final VendingMachine machine) {
	    // TODO Auto-generated method stub
	    return true;
	}

    },

    SELECTING_ITEM {
	/*
	 * Coins have been put in machine and is now ready to select and prepare
	 * item for customer
	 */

	@Override
	boolean putCoins(final VendingMachine machine, final String coin) {
	    BigDecimal money = null;
	    try {
		money = new BigDecimal(coin);
		if (BigDecimal.ZERO.compareTo(money) >= 0) {
		    throw new NumberFormatException();
		}
	    } catch (NumberFormatException e) {
		ConsoleWriter.write("A fatal error has occured while machine was operating. Please call service!");
		machine.setState(States.SERVICE);
		return false;
	    }
	    machine.addCoinsToMachine(money);
	    ConsoleWriter.write(machine.toString());
	    return true;
	}

	@Override
	boolean selectItem(final VendingMachine machine, final String name) {
	    Product product = machine.getProduct(name);
	    if (product == null) {
		machine.setState(States.SELECTING_ITEM);
		ConsoleWriter.write(String.format("Item with name: %s is invalid, please pick a valid name!", name));
		return false;
	    }
	    if (machine.checkIfEnoughQuantityAndMoney(product)) {
		machine.takeCustomersMoney(product);
		machine.makeItem(product);
		machine.setState(States.TAKE_ITEM);
		return true;
	    }
	    machine.setState(States.SELECTING_ITEM);
	    return false;
	}

	@Override
	boolean takeItem(final VendingMachine machine) {
	    return false;
	}

	@Override
	boolean service(final VendingMachine machine) {
	    return false;
	}

	@Override
	boolean returnMoney(final VendingMachine machine) {
	    // Returns all customer coins in machine and returns back to
	    // STAND_BY
	    machine.setState(States.STAND_BY);
	    return true;
	}

	@Override
	boolean addProduct(final VendingMachine machine) {
	    // TODO Auto-generated method stub
	    return false;
	}

    },

    TAKE_ITEM {
	/*
	 * Machine has prepared item for customer successfully and is now
	 * waiting for item to be picked by customer
	 */
	@Override
	boolean putCoins(final VendingMachine machine, final String coins) {
	    return false;
	}

	@Override
	boolean selectItem(final VendingMachine machine, final String name) {
	    return false;
	}

	@Override
	boolean takeItem(final VendingMachine machine) {
	    /*
	     * Checks if there are coins left in machine, if yes return to
	     * select menu and give option to continue buying, else go back to
	     * STAND_BY
	     */
	    if (machine.hasMoneyLeft()) {
		machine.setState(States.SELECTING_ITEM);
		ConsoleWriter.write(machine.toString());
	    } else {
		machine.setState(States.STAND_BY);
	    }
	    return true;
	}

	@Override
	boolean service(final VendingMachine machine) {
	    return false;
	}

	@Override
	boolean returnMoney(final VendingMachine machine) {
	    return false;
	}

	@Override
	boolean addProduct(final VendingMachine machine) {
	    // TODO Auto-generated method stub
	    return false;
	}

    },

    SERVICE {
	/*
	 * A fatal error has occurred while the machine was working... Machine
	 * will now be out of service until fixed! When fixed it should return
	 * back to STAND_BY state. Machine should return any money put by a
	 * customer when error occurred!
	 */

	@Override
	boolean putCoins(final VendingMachine machine, final String coins) {
	    return false;
	}

	@Override
	boolean selectItem(final VendingMachine machine, final String name) {
	    return false;
	}

	@Override
	boolean takeItem(final VendingMachine machine) {
	    return false;
	}

	@Override
	boolean service(final VendingMachine machine) {
	    machine.setState(States.STAND_BY);
	    return true;
	}

	@Override
	boolean returnMoney(final VendingMachine machine) {
	    return false;
	}

	@Override
	boolean addProduct(final VendingMachine machine) {
	    return false;
	}

    };

    abstract boolean putCoins(final VendingMachine machine, String coins);

    abstract boolean selectItem(final VendingMachine machine, final String name);

    abstract boolean takeItem(final VendingMachine machine);

    abstract boolean service(final VendingMachine machine);

    abstract boolean returnMoney(final VendingMachine machine);

    abstract boolean addProduct(final VendingMachine machine);

}
