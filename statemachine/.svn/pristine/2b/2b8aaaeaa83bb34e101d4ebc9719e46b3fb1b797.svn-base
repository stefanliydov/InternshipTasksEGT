package statemachine;

import java.util.concurrent.ThreadLocalRandom;

import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import egt.interactive.statemachine.VendingMachine;
import resources.MachineLoader;

public class SelectingItemStateTests {

    VendingMachine machine;

    @BeforeMethod
    public void addSomeCashInMachine() {
	machine = new VendingMachine();
	MachineLoader.loadMachine(machine);
	machine.putCoins(400L);
    }

    @Test
    public void machineShouldNotGiveItem() {
	Assert.assertFalse(machine.takeItem());
    }

    @Test
    public void machineShouldGoToServiceAndReturnMoney() {
	final long currAmount = machine.getCoins();
	Assert.assertEquals(currAmount, 400L);
	Assert.assertTrue(machine.service());
	final long result = machine.getCoins();
	Assert.assertEquals(result, 0L);
    }

    @Test
    public void machineShouldAcceptCoinsAndNotChangeState() {
	machine.putCoins(100L);

	final long coins = machine.getCoins();

	Assert.assertEquals(coins, 500L);
    }

    @Test
    public void machineShouldLetYouSelectItemIfMoneyIsEnough() {
	Assert.assertTrue(machine.selectItem("Kit-Kat"));
    }

    @Test
    public void machineShouldNotLetYouSelectItemIfMoneyIsNotEnough() {
	machine.returnMoney();
	machine.putCoins(5L);
	Assert.assertFalse(machine.selectItem("Kit-Kat"));
    }

    @Test
    public void machineShouldNotLetYouSelectItemIfThereIsntEnoughQuantity() {
	machine.returnMoney();
	machine.addProduct("dummyProduct", ThreadLocalRandom.current().nextLong(20, 400), 1);
	machine.putCoins(500L);
	machine.selectItem("dummyProduct");
	machine.takeItem();
	Assert.assertFalse(machine.selectItem("dummyProduct"));
    }

    @Test
    public void machineShouldNotLetYouAddProductsWhileItsWorking() {
	Assert.assertFalse(machine.addProduct("dummyProduct", 10L, 1));
    }

    @Test
    public void machineShouldSelectItemAndThenTakeTheMoneyForIt() {
	Long moneyLeft = 400L;

	machine.selectItem("Kit-Kat");
	moneyLeft -= machine.getItemPrice("Kit-Kat");
	final Long coins = machine.getCoins();

	Assert.assertEquals(coins, moneyLeft);
    }

    @Test
    public void machineShouldSelectItemAndThenReduceQuantityOfItem() {
	// final int expected = machine.getItemQuantity("Kit-Kat") - 1;
	machine.selectItem("Kit-Kat");
	machine.takeItem();

	// final int result = machine.getItemQuantity("Kit-Kat");

	// Assert.assertEquals(result, expected);

    }

}
