package statemachine;

import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.util.concurrent.ThreadLocalRandom;

import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import egt.interactive.statemachine.States;
import egt.interactive.statemachine.VendingMachine;

public class StandByStateTests {

    private VendingMachine machine;

    @BeforeMethod
    public void resetMachine() {
	machine = new VendingMachine();
    }

    @Test
    public void machineInStandByShouldNotReturnMoney() {
	Assert.assertNull(machine.returnMoney());
    }

    @Test
    public void machineInStandByShouldNotNeedService() {
	Assert.assertFalse(machine.service());
    }

    @Test
    public void machineInStandByShouldNotSelectItem() {
	Assert.assertFalse(machine.selectItem(ThreadLocalRandom.current().nextInt(5)));
    }

    @Test
    public void machineInStandByShouldNotGiveItem() {
	Assert.assertFalse(machine.takeItem());
    }

    @Test
    public void machineInStandByShouldTakeCoins() {
	Assert.assertTrue(machine.putCoins("1.23"));
    }

    @Test
    public void machineshouldAddNewItem() {
	// machine.addProduct("Ice-Cream", 1.10, 10);
    }

    @Test
    public void machineInStandByShouldChangeStateAfterPutCoins()
	    throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {

	machine.putCoins("1.23");

	Class c = machine.getClass();
	Field field = c.getDeclaredField("state");
	field.setAccessible(true);
	States state = (States) field.get(machine);

	Assert.assertEquals(state, States.SELECTING_ITEM);
    }

}
