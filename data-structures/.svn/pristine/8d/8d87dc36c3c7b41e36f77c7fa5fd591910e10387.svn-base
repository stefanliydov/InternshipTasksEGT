package com.egtinteractive.data_structures.list;

import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.egtinteractive.data_structures.generator.NumberGenerator;

public class RemoveTests {

    private final static int ZERO = 0;
    private int size;

    @DataProvider(name = "getClass")
    public Object[][] getData() {
	return new Object[][] { { new ArrayList<>() }, { new LinkedList<>() } };
    }

    @BeforeClass
    public void setSize() {
	this.size = NumberGenerator.generate(50, 150);
    }

    @Test(dataProvider = "getClass")
    public void removeShouldRemoveCorrectElement(List<Integer> list) {
	final java.util.List<String> arrayList = new java.util.ArrayList<>();
	final List<String> myList = new ArrayList<>();

	for (int i = ZERO; i < this.size; i++) {
	    final String str = String.valueOf(NumberGenerator.generate(30000));
	    myList.add(str);
	    arrayList.add(str);
	    if (i % 2 == 0) {
		myList.remove(str);
		arrayList.remove(str);
	    }
	}

	for (int i = ZERO; i < list.size(); i++) {
	    Assert.assertEquals(myList.get(i), arrayList.get(i));
	}
    }

    @Test(dataProvider = "getClass")
    public void removeShouldRemoveAtCorrectIndex(List<Integer> list) {
	final java.util.List<Integer> arrayList = new java.util.ArrayList<>();
	int counter = 0;
	for (int i = ZERO; i < this.size; i++) {
	    final int num = NumberGenerator.generate(30000);
	    list.add(num);
	    arrayList.add(num);
	    if (i % 2 == 0) {
		list.remove(counter);
		arrayList.remove(counter);
		counter--;
	    }
	    counter++;
	}

	for (int i = ZERO; i < list.size(); i++) {
	    Assert.assertEquals(list.get(i), arrayList.get(i));
	}
    }

    @Test(dataProvider = "getClass")
    public void removeOnAnEmptyListShouldReturnFalse(List<Integer> list) {

	final boolean result = list.remove(Integer.valueOf(NumberGenerator.generate(15)));
	Assert.assertFalse(result);
    }

}
