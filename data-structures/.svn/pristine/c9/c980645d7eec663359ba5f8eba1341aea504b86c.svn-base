package com.egtinteractive.data_structures.tree;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Iterator;

public class BinaryTree<T extends Comparable<T>> implements Tree<T> {

    private Node root;
    private int size;

    public BinaryTree() {
	this.size = 0;
    }

    @Override
    public void add(T key) {
	if (this.root == null) {
	    this.root = new Node(key);
	    this.size++;
	    return;
	}
	if (add(key, null, this.root)) {
	    this.size++;
	}

    }

    private boolean add(T key, Node parent, Node node) {
	if (node == null) {
	    final int compare = key.compareTo(parent.value);
	    node = new Node(key);
	    if (compare < 0) {
		parent.leftChild = node;
	    } else {
		parent.rightChild = node;
	    }
	    return true;
	}
	int compare = key.compareTo(node.value);
	if (compare < 0) {
	    return add(key, node, node.leftChild);
	} else if (compare > 0) {
	    return add(key, node, node.rightChild);
	}
	return false;
    }

    @Override
    public boolean remove(T element) {
	if (this.root == null) {
	    return false;
	}
	final int beforeSize = this.size();
	this.root = remove(element, this.root);
	if (beforeSize != this.size()) {
	    this.size = beforeSize - 1;
	    return true;
	}
	return false;
    }

    private Node remove(T element, Node node) {
	if (node == null) {
	    return node;
	}
	final int compare = element.compareTo(node.value);
	if (compare < 0) {
	    node.leftChild = remove(element, node.leftChild);
	} else if (compare > 0) {
	    node.rightChild = remove(element, node.rightChild);
	} else {
	    this.size--;
	    if (node.rightChild == null && node.leftChild == null) {
		return null;
	    } else if (node.rightChild == null) {
		return node.leftChild;
	    } else if (node.leftChild == null) {
		return node.rightChild;
	    } else {
		node.value = minValue(node.rightChild);
		node.rightChild = remove(node.value, node.rightChild);
	    }
	}
	return node;
    }

    private T minValue(Node root) {
	T minValue = root.value;
	while (root.leftChild != null) {
	    minValue = root.leftChild.value;
	    root = root.leftChild;
	}
	return minValue;
    }

    @Override
    public T lower(T element) {
	if (this.root == null) {
	    return null;
	}
	return lower(this.root, element);
    }

    private T lower(Node node, T element) {
	if (node == null) {
	    return null;
	}
	if (node.leftChild == null && node.rightChild == null && node.value.compareTo(element) >= 0) {
	    return null;
	}
	final int compare = node.value.compareTo(element);

	if (compare >= 0) {
	    final T leftResult = lower(node.leftChild, element);
	    if (leftResult != null && leftResult.compareTo(node.value) < 0 && leftResult.compareTo(element) < 0) {
		return leftResult;
	    }
	} else {
	    final T rightResult = lower(node.rightChild, element);
	    if (rightResult != null && rightResult.compareTo(node.value) > 0 && rightResult.compareTo(element) < 0) {
		return rightResult;
	    }
	}

	return node.value.compareTo(element) < 0 ? node.value : null;
    }

    @Override
    public T higher(T element) {
	if (this.root == null) {
	    return null;
	}
	return higher(this.root, element);
    }

    private T higher(Node node, T element) {
	if (node == null) {
	    return null;
	}
	if (node.leftChild == null && node.rightChild == null && node.value.compareTo(element) <= 0) {
	    return null;
	}
	final int compare = node.value.compareTo(element);

	if (compare > 0) {
	    final T leftResult = higher(node.leftChild, element);
	    if (leftResult != null && leftResult.compareTo(node.value) < 0 && leftResult.compareTo(element) > 0) {
		return leftResult;
	    }
	} else {
	    final T rightResult = higher(node.rightChild, element);
	    if (rightResult != null && rightResult.compareTo(node.value) > 0 && rightResult.compareTo(element) > 0) {
		return rightResult;
	    }
	}

	return node.value.compareTo(element) > 0 ? node.value : null;
    }

    @Override
    public T pollFirst() {
	if (this.root == null) {
	    return null;
	}
	return pollFirst(this.root, null);
    }

    private T pollFirst(Node node, Node parentNode) {
	if (node.leftChild == null) {
	    if (parentNode == null) {
		this.root = node.rightChild;
	    } else {
		parentNode.setLeftChild(node.rightChild);
	    }
	    this.size--;
	    return node.value;

	}
	return pollFirst(node.leftChild, node);
    }

    @Override
    public T pollLast() {
	if (this.root == null) {
	    return null;
	}
	return pollLast(this.root, null);
    }

    private T pollLast(Node node, Node parentNode) {
	if (node.rightChild == null) {
	    if (parentNode == null) {
		this.root = node.leftChild;
	    } else {
		parentNode.setRightChild(node.leftChild);
	    }
	    this.size--;
	    return node.value;

	}
	return pollLast(node.rightChild, node);
    }

    @Override
    public int size() {
	return this.size;
    }

    @Override
    public void clear() {
	this.root = null;
	this.size = 0;

    }

    @Override
    public Iterator<T> iterator() {
	return new BTIterator(this);
    }

    private class BTIterator implements Iterator<T> {
	private final Deque<T> queue = new ArrayDeque<>();
	private final Tree<T> tree;

	public BTIterator(Tree<T> tree) {
	    inOrder(root, queue);
	    this.tree = tree;
	}

	@Override
	public boolean hasNext() {
	    return this.queue.peekFirst() != null;

	}

	@Override
	public T next() {
	    return this.queue.removeFirst();
	}

	@Override
	public void remove() {
	    tree.remove(this.queue.removeFirst());
	}

    }

    private void inOrder(Node node, Deque<T> queue) {
	if (node == null) {
	    return;
	}
	inOrder(node.leftChild, queue);
	queue.addLast(node.value);
	inOrder(node.rightChild, queue);

    }

    private class Node {

	private T value;
	private Node leftChild;
	private Node rightChild;

	public Node(T value) {
	    super();
	    this.value = value;
	}

	public void setLeftChild(Node left) {
	    this.leftChild = left;
	}

	public void setRightChild(Node right) {
	    this.rightChild = right;
	}

    }
}
