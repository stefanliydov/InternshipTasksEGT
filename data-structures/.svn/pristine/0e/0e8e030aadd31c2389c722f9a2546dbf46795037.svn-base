package com.egtinteractive.data_structures.list;

import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.egtinteractive.data_structures.resources.MyDataProvider;
import com.egtinteractive.data_structures.resources.NumberGenerator;

public class RemoveTests {

    private static final String EMPTY_STRING = "";
    private static final int ZERO = 0;
    private int size;

    @DataProvider(name = "getClass")
    public Object[][] getData() {
	return MyDataProvider.getListDataProvider();
    }

    @BeforeClass
    public void setSize() {
	this.size = NumberGenerator.generate(10000, 15000);
    }

    @Test(dataProvider = "getClass")
    public void removeShouldRemoveCorrectElement(List<Integer> list) {
	final java.util.List<String> arrayList = new java.util.ArrayList<>();
	final List<String> myList = new ArrayList<>();

	for (int i = ZERO; i < this.size; i++) {
	    final String str = String.valueOf(NumberGenerator.generate(30000));
	    myList.add(str);
	    arrayList.add(str);

	    if (i % 2 == 0) {
		boolean myListResult = myList.remove(str);
		arrayList.remove(str);
		Assert.assertTrue(myListResult);
	    }
	}

	for (int i = ZERO; i < list.size(); i++) {
	    Assert.assertEquals(myList.get(i), arrayList.get(i));
	}
    }

    @Test(dataProvider = "getClass")
    public void removeShouldRemoveAtCorrectIndex(List<Integer> list) {
	final java.util.List<Integer> arrayList = new java.util.ArrayList<>();
	int counter = 0;
	for (int i = ZERO; i < this.size; i++) {
	    final int num = NumberGenerator.generate(30000);
	    list.add(num);
	    arrayList.add(num);

	    if (i % 2 == 0) {
		list.remove(counter);
		arrayList.remove(counter);
		counter--;
	    }
	    counter++;
	}

	for (int i = ZERO; i < list.size(); i++) {
	    Assert.assertEquals(list.get(i), arrayList.get(i));
	}
    }

    @Test(dataProvider = "getClass")
    public void removeOnAnEmptyListShouldReturnFalse(List<Integer> list) {

	final boolean result = list.remove(Integer.valueOf(NumberGenerator.generate(15)));
	Assert.assertFalse(result);
    }

    @Test(dataProvider = "getClass")
    public void removeAllElementsByIndexShouldReturnZeroSize(List<Integer> list) {

	for (int i = ZERO; i < this.size; i++) {
	    list.add(i);
	}
	for (int i = ZERO; i < this.size; i++) {
	    list.remove(ZERO);
	}
	Assert.assertEquals(list.size(), ZERO);

	int counter = ZERO;
	for (int i : list) {
	    counter += i;
	}
	Assert.assertEquals(counter, ZERO);
    }

    @Test(dataProvider = "getClass")
    public void removeAllElementsByElementsShouldReturnZeroSize(List<String> list) {
	String[] arr = new String[size];

	for (int i = ZERO; i < this.size; i++) {
	    final String str = String.valueOf(NumberGenerator.generate(10, 2000));
	    arr[i] = str;
	    list.add(str);
	}
	for (int i = ZERO; i < this.size; i++) {

	    list.remove(arr[i]);
	}
	Assert.assertEquals(list.size(), ZERO);

	String counter = EMPTY_STRING;
	for (String str : list) {
	    counter += str;
	}
	Assert.assertEquals(counter, EMPTY_STRING);
    }

    @Test(dataProvider = "getClass")
    public void removeLastElementShouldClearList(List<Integer> list) {
	final int num = NumberGenerator.generate(150);
	list.add(num);
	final boolean result = list.remove(0);
	Assert.assertTrue(result);
	Assert.assertEquals(list.size(), ZERO);
    }
    @Test(dataProvider = "getClass")
    public void addNullAndThenRemoveOperationsShouldWork(List<Integer> list){
	for (int i = ZERO; i < this.size; i++) {
	    list.add(i);
	}
	list.add(2,null);
	list.add(0,null);
	list.add(10,null);
	list.add(15,null);
	list.add(this.size/2,null);
	
	Assert.assertTrue(list.remove(Integer.valueOf(NumberGenerator.generate(this.size/2))));
	Assert.assertTrue(list.remove(NumberGenerator.generate(14)));

    }
    
    @Test(dataProvider = "getClass")
    public void addNullInTheMiddleRemoveShouldWork(List<Integer> list) {
	final int size = NumberGenerator.generate(50,200);
	for (int i = ZERO; i < size; i++) {
	    list.add(i);
	}
	final int middleIndex = size / 2;
	list.add(middleIndex, null);

	final boolean result = list.remove(middleIndex);
	Assert.assertTrue(result);
	
	final Integer nullPosition = list.indexOf(null);
	Assert.assertEquals(nullPosition, Integer.valueOf(-1));

    }
    
}
