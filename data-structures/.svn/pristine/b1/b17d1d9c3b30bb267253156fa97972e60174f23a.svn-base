package com.egtinteractive.data_structures.map;

import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.egtinteractive.data_structures.resources.MyDataProvider;
import com.egtinteractive.data_structures.resources.NumberGenerator;

public class PutTests {

    private static final int ONE = 1;
    private int size;

    @DataProvider(name = "getClassStrategy")
    public Object[][] getData() {
	return MyDataProvider.getMapDataProvider();
    }

    @BeforeClass
    public void setSize() {
	this.size = NumberGenerator.generate(150, 300);
    }

    @Test(dataProvider = "getClassStrategy")
    public void putShouldAddKeyAndValueTogether(Map<Character, Integer> map) {
	for (int i = ONE; i < this.size; i++) {
	    map.put((char) i, i);
	}
	for (int i = ONE; i < this.size; i++) {
	    final int result = map.get((char) i);
	    Assert.assertEquals(result, i);
	}

    }

    @Test(dataProvider = "getClassStrategy")
    public void putOnElementsWithSameHashCodeShouldAddCorrectly(Map<Character, Integer> map) {
	for (int i = ONE; i < 120; i += 16) {
	    map.put((char) i, i);
	}
	for (int i = ONE; i < 120; i += 16) {
	    final int result = map.get((char) i);
	    Assert.assertEquals(result, i);
	}
    }

    @Test(dataProvider = "getClassStrategy")
    public void putShouldNotAddElementsThatAlreadyExist(Map<Character, Integer> map) {
	for (int i = ONE; i < this.size; i++) {
	    map.put('A', i);
	}
	Assert.assertEquals(map.size(), 1);

    }

    @Test(dataProvider = "getClassStrategy")
    public void putOnAFullListShouldIncreaseSizeAndChainElements(Map<Character, Integer> map) {
	for (int i = ONE; i <= 90; i++) {
	    map.put((char) i, i);
	}

	Assert.assertEquals(map.size(), 90);
    }

    @Test(dataProvider = "getClassStrategy")
    public void putShouldIncreaseSizeIfSuccesful(Map<Character, Integer> map) {
	for (int i = ONE; i <= this.size; i++) {
	    map.put((char) i, i);
	}
	for (int i = 100; i <= this.size; i++) {
	    map.put((char) i, i);
	}
	Assert.assertEquals(map.size(), this.size);

    }

    @Test(dataProvider = "getClassStrategy")
    public void putWithExistingKeyShouldOverrideValue(Map<Character, Integer> map) {
	for (int i = ONE; i <= this.size; i++) {
	    map.put('A', i);
	}

	Assert.assertEquals(map.size(), ONE);

	final int result = map.get('A');
	Assert.assertEquals(result, this.size);

    }

    @Test(dataProvider = "getClassStrategy")
    public void putOnlyNullValuesShouldThenHaveOtherOperationsWork(Map<String, Integer> map) {
	for (int i = ONE; i < this.size; i++) {
	    map.put(String.valueOf(i), null);
	}

	Assert.assertNull(map.remove(String.valueOf(ONE)));
	Assert.assertTrue(map.containsKey(String.valueOf(100)));

    }

}
