package com.egtinteractive.data_structures.map;

import java.util.ArrayList;
import java.util.List;

import com.egtinteractive.data_structures.map.MyMap.Entry;
import com.egtinteractive.data_structures.map.MyMap.Size;

enum CollisionSolvingStrategy {
    CHAINING {
	@Override
	public <K, V> V get(final K key, final Entry<K, V>[] buckets) {
	    final int length = buckets.length;
	    int hashCode = key.hashCode() % length;
	    MyMap.Entry<K, V> currEntry = buckets[hashCode];

	    while (currEntry != null) {
		if (currEntry.getKey().equals(key)) {
		    return currEntry.getValue();
		}
		currEntry = currEntry.getNext();
	    }
	    return null;
	}

	@Override
	public <K, V> V put(final K key, final V value, final Entry<K, V>[] buckets, final MyMap.Size size) {
	    if (key == null) {
		throw new IllegalArgumentException("Key cannot be null!");
	    }
	    final int length = buckets.length;
	    final Entry<K, V> newEntry = new Entry<>(key, value);
	    int hashCode = key.hashCode() % length;

	    Entry<K, V> currEntry = buckets[hashCode];
	    if (currEntry == null) {
		buckets[hashCode] = newEntry;
		size.incrementSize();
		return value;
	    }
	    while (currEntry.getNext() != null) {
		if (currEntry.getKey().equals(newEntry.getKey())) {
		    currEntry.setValue(value);
		    return value;
		}
		currEntry = currEntry.getNext();
	    }
	    if (currEntry.getKey().equals(newEntry.getKey())) {
		currEntry.setValue(value);
		return value;
	    }
	    currEntry.setNext(newEntry);
	    size.incrementSize();
	    return value;
	}

	@Override
	public <K, V> V remove(final K key, final Entry<K, V>[] buckets, final MyMap.Size size) {
	    final int length = buckets.length;
	    int hashCode = key.hashCode() % length;

	    Entry<K, V> parentEntry = buckets[hashCode];
	    if (parentEntry == null) {
		return null;
	    }
	    if (parentEntry.getKey() != null && parentEntry.getKey().equals(key)) {
		buckets[hashCode] = parentEntry.getNext();
		size.reduceSize();
		return parentEntry.getValue();
	    }
	    Entry<K, V> currEntry = parentEntry.getNext();

	    while (currEntry != null) {

		if (parentEntry.getKey() != null && currEntry.getKey().equals(key)) {
		    parentEntry.setNext(currEntry.getNext());
		    size.reduceSize();
		    return currEntry.getValue();
		}
		parentEntry = currEntry;
		currEntry = currEntry.getNext();
	    }
	    return null;
	}

	@Override
	public <K, V> boolean containsKey(final K key, final Entry<K, V>[] buckets) {
	    final int length = buckets.length;
	    int hashCode = key.hashCode() % length;

	    Entry<K, V> currEntry = buckets[hashCode];

	    while (currEntry != null) {
		if (currEntry.getKey() != null && currEntry.getKey().equals(key))
		    return true;
		currEntry = currEntry.getNext();
	    }
	    return false;
	}

	@Override
	public <K, V> boolean containsValue(final V value, final Entry<K, V>[] buckets) {
	    for (int i = 0; i < buckets.length; i++) {
		Entry<K, V> currEntry = buckets[i];

		while (currEntry != null) {
		    if (currEntry.getValue() == null && value == null
			    || currEntry.getKey() != null && currEntry.getValue().equals(value))
			return true;
		    currEntry = currEntry.getNext();
		}

	    }
	    return false;
	}

	@Override
	public <K, V> void clear(final Entry<K, V>[] buckets, final MyMap.Size size) {
	    size.resetSize();
	}

	@Override
	public <K, V> Entry<K, V>[] increaseSize(Entry<K, V>[] buckets) {
	    Entry<K, V>[] newBuckets = new Entry[buckets.length * 2];
	    final int length = newBuckets.length;
	    for (int i = 0; i < buckets.length; i++) {
		Entry<K, V> currEntry = buckets[i];
		while (currEntry != null) {
		    final int newPosition = currEntry.getKey().hashCode() % length;
		    Entry<K, V> temp = null;
		    if (newBuckets[newPosition] == null) {
			newBuckets[newPosition] = currEntry;
			temp = currEntry.getNext();
			currEntry.setNext(null);
		    } else {
			Entry<K, V> nestedEntry = newBuckets[newPosition];
			while (nestedEntry.getNext() != null) {
			    nestedEntry = nestedEntry.getNext();
			}
			nestedEntry.setNext(currEntry);
			temp = currEntry.getNext();
			currEntry.setNext(null);
		    }
		    currEntry = temp;
		}
	    }
	    return newBuckets;
	}

    },
    LINEAR_PROBING {
	private List<Integer> removedSpaces = new ArrayList<>();

	@Override
	public <K, V> V get(K key, Entry<K, V>[] buckets) {
	    final int length = buckets.length;
	    int hashCode = key.hashCode() % length;

	    while (removedSpaces.contains(hashCode)
		    || buckets[hashCode] != null && !buckets[hashCode].getKey().equals(key)) {
		hashCode = (hashCode + 1) % buckets.length;

	    }
	    if (buckets[hashCode] != null) {
		return buckets[hashCode].getValue();
	    }
	    return null;
	}

	@Override
	public <K, V> V put(final K key, final V value, final Entry<K, V>[] buckets, final Size size) {
	    if (key == null) {
		throw new IllegalArgumentException("Key cannot be null!");
	    }
	    final int length = buckets.length;
	    final Entry<K, V> newEntry = new Entry<>(key, value);
	    int hashCode = key.hashCode() % length;

	    while (buckets[hashCode] != null && !buckets[hashCode].getKey().equals(key)) {
		if (buckets[hashCode].getKey().equals(key)) {
		    return null;
		}
		hashCode = (hashCode + 1) % buckets.length;
	    }
	    if (buckets[hashCode] != null) {
		buckets[hashCode].setValue(value);
		return value;
	    } else {
		buckets[hashCode] = newEntry;
		size.incrementSize();

		if (this.removedSpaces.contains(hashCode)) {
		    this.removedSpaces.remove(Integer.valueOf(hashCode));
		}
		return value;
	    }
	}

	@Override
	public <K, V> V remove(final K key, final Entry<K, V>[] buckets, final MyMap.Size size) {
	    final int length = buckets.length;
	    int hashCode = key.hashCode() % length;

	    while (removedSpaces.contains(hashCode) || buckets[hashCode] != null && buckets[hashCode].getKey() != null
		    && !buckets[hashCode].getKey().equals(key)) {
		hashCode = (hashCode + 1) % buckets.length;
	    }
	    if (buckets[hashCode] != null) {
		final V result = buckets[hashCode].getValue();
		buckets[hashCode] = null;
		size.reduceSize();
		removedSpaces.add(hashCode);
		return result;
	    }
	    return null;
	}

	@Override
	public <K, V> boolean containsKey(final K key, final Entry<K, V>[] buckets) {
	    final int length = buckets.length;
	    int hashCode = key.hashCode() % length;

	    while (removedSpaces.contains(hashCode) || buckets[hashCode] != null && buckets[hashCode].getKey() != null
		    && !buckets[hashCode].getKey().equals(key)) {
		hashCode = (hashCode + 1) % buckets.length;
	    }
	    if (buckets[hashCode] != null) {
		return true;
	    }
	    return false;
	}

	@Override
	public <K, V> boolean containsValue(final V value, final Entry<K, V>[] buckets) {
	    for (int i = 0; i < buckets.length; i++) {
		if (buckets[i] != null) {
		    if (buckets[i].getValue() == null && value == null
			    || buckets[i].getValue() != null && buckets[i].getValue().equals(value)) {
			return true;
		    }
		}
	    }
	    return false;
	}

	@Override
	public <K, V> void clear(final Entry<K, V>[] buckets, final MyMap.Size size) {
	    size.resetSize();
	    removedSpaces = new ArrayList<>();
	}

	@Override
	public <K, V> Entry<K, V>[] increaseSize(Entry<K, V>[] buckets) {
	    Entry<K, V>[] newBuckets = new Entry[buckets.length * 2];
	    final int length = newBuckets.length;
	    for (int i = 0; i < buckets.length; i++) {
		Entry<K, V> currEntry = buckets[i];
		if (currEntry != null) {
		    int newPosition = currEntry.getKey().hashCode() % length;

		    if (newBuckets[newPosition] == null) {
			newBuckets[newPosition] = currEntry;
		    } else {
			while (newBuckets[newPosition] != null) {
			    newPosition = (newPosition + 1) % length;
			}
			newBuckets[newPosition] = currEntry;
		    }
		}
	    }
	    return newBuckets;
	}

    };

    public abstract <K, V> V get(K key, Entry<K, V>[] buckets);

    public abstract <K, V> V put(K key, V value, Entry<K, V>[] buckets, MyMap.Size size);

    public abstract <K, V> V remove(K key, Entry<K, V>[] buckets, MyMap.Size size);

    public abstract <K, V> boolean containsKey(K key, Entry<K, V>[] buckets);

    public abstract <K, V> boolean containsValue(V value, Entry<K, V>[] buckets);

    public abstract <K, V> void clear(Entry<K, V>[] buckets, MyMap.Size size);

    public abstract <K, V> Entry<K, V>[] increaseSize(Entry<K, V>[] buckets);
}
