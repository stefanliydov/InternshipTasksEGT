package com.egtinteractive.data_structures.list;

import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.egtinteractive.data_structures.generator.NumberGenerator;

public class IndexOfTests {

    private final int ZERO = 0;
    private int size;

    @DataProvider(name = "getClass")
    public Object[][] getData() {
	return new Object[][] { { new ArrayList<>() }, { new LinkedList<>() } };
    }

    @BeforeClass
    public void setSize() {
	this.size = NumberGenerator.generate(20, 50);
    }

    @Test(dataProvider = "getClass")
    public void indexOfShouldReturnCorrectIndex(List<Integer> list) {
	// This test 1/5 of the times it runs fails, I'm not sure why ...

	for (int i = ZERO; i < this.size; i++) {
	    final int num = NumberGenerator.generate(500, 2000);
	    list.add(num);

	    final int result = list.indexOf(num);
	    Assert.assertEquals(result, i);

	}
    }

    @Test(dataProvider = "getClass")
    public void indexOfOnAnEmptyListShouldReturnCorrect(List<Integer> list) {
	final int result = list.indexOf(ZERO);
	Assert.assertEquals(result, -1);
    }

    @Test(dataProvider = "getClass")
    public void indexOfForANonExistingElementShouldReturnCorrentAnswer(List<Integer> list) {
	for (int i = ZERO; i < this.size; i++) {
	    list.add(i);
	}

	final int result = list.indexOf(NumberGenerator.generate(51, 100));
	Assert.assertEquals(result, -1);
    }
}
