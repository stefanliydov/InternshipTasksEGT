package com.egtinteractive.data_structures.list;

import java.util.Iterator;
import java.util.Objects;

public class LinkedList<T> implements List<T> {

    private Node<T> head;
    private int size;

    public LinkedList() {
	this.size = 0;
    }

    @Override
    public T get(final int index) {
	this.isOutOfBounds(index);
	Node<T> currNode = this.head;
	for (int i = 0; i < index; i++) {
	    currNode = currNode.getNext();
	}

	return (T) currNode.getValue();
    }

    @Override
    public void add(final T element) {
	if (this.head == null) {
	    this.head = new Node<>(element);
	    size++;
	    return;
	}
	Node<T> newNode = new Node<>(element);
	Node<T> currNode = this.head;

	while (currNode.getNext() != null) {
	    currNode = currNode.getNext();
	}
	currNode.setNext(newNode);
	size++;
    }

    @Override
    public void add(final int index, final T element) {
	if (index < 0 || index > size) {
	    throw new IndexOutOfBoundsException(
		    String.format("Index with value: %s is out of bounds. List size: %s", index, this.size));
	}

	Node<T> newNode = new Node<>(element);
	Node<T> currNode = this.head;
	if (index == 0) {
	    newNode.setNext(this.head);
	    this.head = newNode;
	    size++;
	    return;
	}
	for (int i = 0; i < index - 1; i++) {
	    currNode = currNode.getNext();
	}
	final Node<T> nextNode = currNode.getNext();
	currNode.setNext(newNode);
	newNode.setNext(nextNode);
	size++;

    }

    @Override
    public void set(final int index, final T element) {
	this.isOutOfBounds(index);
	Node<T> currNode = this.head;

	for (int i = 0; i < index; i++) {
	    currNode = currNode.getNext();
	}

	currNode.setValue(element);
    }

    @Override
    public boolean remove(final T element) {
	if (this.head == null) {
	    return false;
	}
	Node<T> parentNode = this.head;
	Node<T> currNode = parentNode.getNext();
	if (Objects.equals(parentNode.getValue(), element)) {
	    this.head = currNode;
	    size--;
	    return true;
	}

	while (currNode != null) {
	    if (Objects.equals(parentNode.getValue(), element)) {
		parentNode.setNext(currNode.getNext());
		size--;
		return true;
	    }

	    parentNode = currNode;
	    currNode = currNode.getNext();
	}

	return false;
    }

    @Override
    public boolean remove(final int index) {
	this.isOutOfBounds(index);
	if (index == 0) {
	    this.head = this.head.getNext();
	    size--;
	    return true;
	}

	Node<T> currNode = this.head;
	for (int i = 0; i < index - 1; i++) {
	    currNode = currNode.getNext();
	}
	final Node<T> nextNode = currNode.getNext().getNext();
	currNode.setNext(nextNode);
	size--;

	return true;
    }

    @Override
    public boolean contains(final T o) {
	Node<T> currNode = this.head;
	if (currNode == null) {
	    return false;
	}
	while ((currNode != null)) {
	    if (Objects.equals(currNode.getValue(), o)) {
		return true;
	    }

	    currNode = currNode.getNext();
	}
	return false;
    }

    @Override
    public int indexOf(final T element) {

	Node<T> currNode = this.head;
	for (int i = 0; i < size; i++) {
	    if (Objects.equals(currNode.getValue(), element)) {
		return i;
	    }
	    currNode = currNode.getNext();
	}

	return -1;
    }

    @Override
    public int size() {
	return this.size;
    }

    @Override
    public void clear() {
	this.size = 0;
	this.head = null;
    }

    @Override
    public Iterator<T> iterator() {
	return new CustomIterator();
    }

    private void isOutOfBounds(final int index) {
	if (index < 0 || index >= size) {
	    throw new IndexOutOfBoundsException(
		    String.format("Index with value: %s is out of bounds. List size: %s", index, this.size));
	}
    }

    private class CustomIterator implements Iterator<T> {

	private Node<T> currNode;
	private Node<T> parentNode;

	public CustomIterator() {
	    currNode = new Node<>(null);
	    currNode.setNext(head);

	}

	@Override
	public boolean hasNext() {
	    return currNode.next != null;
	}

	@Override
	public T next() {
	    parentNode = currNode;
	    currNode = currNode.getNext();
	    return (T) currNode.getValue();
	}

	@Override
	public void remove() {
	    if (currNode == null || parentNode == null) {
		throw new IllegalStateException("Node not found");
	    }
	    if (currNode == head) {
		head = head.next;

	    }
	    parentNode.setNext(currNode.getNext());
	    size--;

	}

    }

    private static class Node<E> {
	private E value;
	private Node<E> next;

	public Node(E value) {
	    this.value = value;
	}

	public E getValue() {
	    return value;
	}

	public void setValue(E value) {
	    this.value = value;
	}

	public Node<E> getNext() {
	    return next;
	}

	public void setNext(Node<E> next) {
	    this.next = next;
	}

    }

    @Override
    public boolean equals(Object o) {
	if (o == this)
	    return true;
	if (!(o instanceof List))
	    return false;
	int size = size();
	if (size != ((List<?>) o).size())
	    return false;

	Iterator<T> itr1 = iterator();
	Iterator<?> itr2 = ((List<?>) o).iterator();

	while (--size >= 0) {
	    if (!Objects.equals(itr1.next(), itr2.next())) {
		return false;
	    }
	}
	return true;
    }

    public int hashCode() {
	int hashCode = size;
	Iterator<T> itr = iterator();
	int pos = size();
	while (--pos >= 0) {
	    final T next = itr.next();
	    if (next != null) {
		hashCode = 31 * hashCode + next.hashCode();
	    }

	}
	return hashCode;
    }

}
