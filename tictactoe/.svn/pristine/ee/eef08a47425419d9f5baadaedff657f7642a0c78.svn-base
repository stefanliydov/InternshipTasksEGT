package egt.interactive.tic_tac_toe;

import static org.testng.Assert.assertEquals;

import org.testng.Assert;
import org.testng.annotations.Test;

import egt.interactive.tic_tac_toe.ai_strategy.AiStrategy;
import egt.interactive.tic_tac_toe.board.Board;
import egt.interactive.tic_tac_toe.board.TicTacToeBoard;
import egt.interactive.tic_tac_toe.game.ArcadeGame;
import egt.interactive.tic_tac_toe.game.TicTacToe;
import egt.interactive.tic_tac_toe.resources.TicTacToeFactory;
import egt.interactive.tic_tac_toe.states.GameOutCome;
import egt.interactive.tic_tac_toe.states.States;

public class PlayMoveTests {
    private static final int TARGET_MONEY = 10;
    private static final String DUMMY_NAME = "Dummy name";
    private ArcadeGame game;

    @Test
    public void playMoveShouldPutCrossCorectlyOnTheBoard() {
	game = TicTacToeFactory.createNewPaidTicTacToeGame();
	for (int i = 0; i < 9; i++) {
	    game.playMove(i);
	    final String a = game.getBoard().getField(i);
	    assertEquals(a, "X");
	    game = TicTacToeFactory.createNewPaidTicTacToeGame();
	}

    }

    @Test
    public void playMoveShouldThenHaveComputerPlay() {
	// AiStrategy strategy = Mockito.mock(AiStrategy.class);
	final AiStrategy strategy = new AiStrategy() {
	    public int count = 0;

	    @Override
	    public Integer playAIMove(Board board) {
		return count++;
	    }
	};
	game = new TicTacToe(strategy);
	game.putCoins(TARGET_MONEY);

	int playerMove = 4;

	for (int i = 0; i < 3; i++) {
	    Assert.assertEquals(game.getBoard().getField(i), " ");
	    game.playMove(playerMove++);
	    Assert.assertEquals(game.getBoard().getField(i), "O");
	}

    }

    @Test
    public void playMoveShouldHaveGameEndIfTPlayerWinsAndTakeName() {
	final AiStrategy strategy = new AiStrategy() {
	    public int count = 0;

	    @Override
	    public Integer playAIMove(Board board) {
		return count++;
	    }
	};
	game = new TicTacToe(strategy);
	game.putCoins(TARGET_MONEY);

	int playerMove = 6;

	for (int i = 1; i < 4; i++) {
	    game.playMove(playerMove++);
	}

	Assert.assertTrue(game.giveName(DUMMY_NAME));

	Assert.assertTrue(game.endGame());

	Assert.assertEquals(game.getState(), States.STAND_BY);

	Assert.assertEquals(game.getOutCome(), GameOutCome.PLAYER_WINS);
    }

    @Test
    public void playMoveShouldHaveGameEndIfTheGameIsDrawAndNotAcceptName() {
	final Board board = new TicTacToeBoard();
	board.addMove(2, "O");
	board.addMove(3, "O");
	board.addMove(4, "O");
	board.addMove(8, "O");

	for (int i = 0; i < 7; i++) {
	    if (board.getField(i) == " ") {
		board.addMove(i, "X");
	    }
	}

	game = new TicTacToe(board);
	game.putCoins(TARGET_MONEY);
	game.playMove(7);

	Assert.assertFalse(game.giveName(DUMMY_NAME));

	Assert.assertTrue(game.endGame());

	Assert.assertEquals(game.getState(), States.STAND_BY);

	Assert.assertEquals(game.getOutCome(), GameOutCome.DRAW);
    }

    @Test
    public void playMoveWithAIWinningShouldEndGame() {
	final AiStrategy strategy = new AiStrategy() {
	    public int count = 0;

	    @Override
	    public Integer playAIMove(Board board) {
		return count++;
	    }
	};
	game = new TicTacToe(strategy);
	game.putCoins(TARGET_MONEY);

	int playerMove = 4;

	for (int i = 0; i < 3; i++) {
	    game.playMove(playerMove++);
	}

	Assert.assertFalse(game.giveName(DUMMY_NAME));

	Assert.assertTrue(game.endGame());

	Assert.assertEquals(game.getState(), States.STAND_BY);

	Assert.assertEquals(game.getOutCome(), GameOutCome.AI_WINS);

    }

}
