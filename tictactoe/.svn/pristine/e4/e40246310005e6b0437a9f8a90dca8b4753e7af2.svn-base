package egt.interactive.tic_tac_toe.connection;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import egt.interactive.tic_tac_toe.states.GameOutCome;

public class ConnectionClass {

    private final Connection connection;

    public ConnectionClass() {
	this.connection = ConnectionClass.getConnection();
    }

    public static Connection getConnection() {
	final String URL = "jdbc:mysql://localhost:3306/tic_tac_toe?createDatabaseIfNotExist=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
	final String USER = "root";
	final String PASSWORD = "stefan12";
	try {

	    // Class.forName(JDBC_DRIVER);
	    return DriverManager.getConnection(URL, USER, PASSWORD);
	} catch (Exception e) {
	    throw new RuntimeException(e);
	}
    }

    public boolean doesPlayerExist(final String name) {
	return this.getPlayerId(name) != null;
    }

    public void addPlayer(final String name) {
	final String selectStatement = "INSERT INTO players(name) VALUES ('" + name + "')";
	Statement stmt = null;

	try {
	    stmt = connection.createStatement();
	    stmt.executeUpdate(selectStatement);

	} catch (Exception e) {
	    throw new RuntimeException(e);
	}

    }

    public void addGameWithNoPlayer(final GameOutCome outcome) {
	final String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
	final String selectStatement = "INSERT INTO games(date_time, outcome) VALUES ('" + timeStamp + "', '"
		+ outcome.name() + "')";
	Statement stmt = null;

	try {
	    stmt = connection.createStatement();
	    stmt.executeUpdate(selectStatement);

	} catch (Exception e) {
	    throw new RuntimeException(e);
	}
    }

    public void addGameWithPlayer(final String playerName, final GameOutCome outcome) {

	final String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());

	final Integer playerId = this.getPlayerId(playerName);
	final String selectStatement = "INSERT INTO games(player_id, date_time, outcome) VALUES ('" + playerId + "','"
		+ timeStamp + "', '" + outcome.name() + "')";
	Statement stmt = null;
	try {
	    stmt = connection.createStatement();
	    stmt.executeUpdate(selectStatement);

	} catch (Exception e) {
	    throw new RuntimeException(e);
	}

    }

    public String getTopThreePlayers() {

	final String selectStatement = "SELECT count(*) as total_wins, p.name  FROM players as p "
		+ "JOIN games as g  ON p.id = g.player_id "
		+ "WHERE g.outcome = 'PLAYER_WINS' GROUP BY player_id "
		+ "ORDER BY total_wins desc, p.name ASC limit 3";
	Statement stmt = null;
	ResultSet rs = null;
	try {
	    stmt = connection.createStatement();
	    rs = stmt.executeQuery(selectStatement);

	    final StringBuilder sb = new StringBuilder();
	    sb.append("   Hall of Fame\n");
	    int count = 1;
	    if (rs != null) {
		while (rs.next()) {
		    sb.append(count++).append(". ")
			    .append(String.format("%-12s %-12s\n", rs.getString("name"), rs.getString("total_wins")));

		}
	    }
	    return sb.toString();
	} catch (Exception e) {
	    throw new RuntimeException(e);
	}

    }

    private Integer getPlayerId(final String playerName) {
	final String selectStatement = "SELECT * FROM players WHERE name = '" + playerName + "'";
	Statement stmt = null;
	ResultSet rs = null;
	try {
	    stmt = connection.createStatement();
	    rs = stmt.executeQuery(selectStatement);
	    if (rs.next()) {
		return Integer.valueOf(rs.getString("id"));
	    }
	    return null;
	} catch (Exception e) {
	    throw new RuntimeException(e);
	}
    }
}