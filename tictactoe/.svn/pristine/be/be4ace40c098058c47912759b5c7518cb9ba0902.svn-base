package egt.interactive.tic_tac_toe.resources;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

import egt.interactive.tic_tac_toe.connection.DBConnectionFactory;
import egt.interactive.tic_tac_toe.game.GameOutcome;

public class DBQueryHelper {
    final static String CONFIG_PATH = "src/main/resources/config.properties";
    final static DBConnectionFactory factory = new DBConnectionFactory();

    private Properties getCredentials() {
	final Properties prop = new Properties();
	InputStream input = null;

	try {
	    input = new FileInputStream(CONFIG_PATH);
	    // load a properties file
	    prop.load(input);
	    return prop;
	} catch (IOException e) {
	    e.printStackTrace();
	    return null;
	} finally {
	    if (input != null) {
		try {
		    input.close();
		} catch (IOException e) {
		    e.printStackTrace();
		}
	    }
	}
    }

    public void dropCreateTablesAndAddInfo() {
	final Properties prop = getCredentials();
	String user = prop.getProperty("dbuser");
	String password = prop.getProperty("dbpassword");
	Process command = null;
	try {
	    final String initScriptName = "src/main/resources/tic-tac-toe.sql";

	    final String executeInitScript = String.format("mysql -u %s -p%s < %s", user, password, initScriptName);
	    final String[] cmd = { "/bin/sh", "-c", executeInitScript };

	    command = Runtime.getRuntime().exec(cmd);
	    if (command.waitFor() != 0) {
		throw new RuntimeException("make sure that init script is in the correct folder");
	    }
	} catch (Exception e) {
	    throw new RuntimeException(e);
	} finally {
	    if (command != null) {
		command.destroy();
	    }
	}
    }

    public void dropCreateEmptyTables() {
	final Properties prop = getCredentials();
	String user = prop.getProperty("dbuser");
	String password = prop.getProperty("dbpassword");
	Process command = null;
	try {
	    final String initScriptName = "src/main/resources/tic-tac-toe-empty.sql";

	    final String executeInitScript = String.format("mysql -u %s -p%s < %s", user, password, initScriptName);
	    final String[] cmd = { "/bin/sh", "-c", executeInitScript };

	    command = Runtime.getRuntime().exec(cmd);
	    if (command.waitFor() != 0) {
		throw new RuntimeException("make sure that init script is in the correct folder");
	    }
	} catch (Exception e) {
	    throw new RuntimeException(e);
	} finally {
	    if (command != null) {
		command.destroy();
	    }
	}
    }

    public Integer getPlayersCount() {
	final String selectStatement = "SELECT count(*) as count FROM tic_tac_toe.players;";
	try (final Connection connection = factory.getConnection();
		final Statement stmt = connection.createStatement();
		final ResultSet rs = stmt.executeQuery(selectStatement)) {
	    if (rs.next()) {
		return Integer.valueOf(rs.getString("count"));
	    }
	    connection.close();
	    return null;
	} catch (Exception e) {
	    throw new RuntimeException();
	}
    }

    public Integer getGamesCount() {
	final String selectStatement = "SELECT count(*) as count FROM tic_tac_toe.games;";
	try (final Connection connection = factory.getConnection();
		final Statement stmt = connection.createStatement();
		final ResultSet rs = stmt.executeQuery(selectStatement)) {
	    if (rs.next()) {
		return Integer.valueOf(rs.getString("count"));
	    }
	    connection.close();
	    return null;
	} catch (Exception e) {
	    throw new RuntimeException();
	}
    }

    public GameOutcome getGameOutcome() {
	final String selectStatement = "SELECT outcome  FROM tic_tac_toe.games WHERE id =1;";
	try (final Connection connection = factory.getConnection();
		final Statement stmt = connection.createStatement();
		final ResultSet rs = stmt.executeQuery(selectStatement)) {
	    if (rs.next()) {
		return GameOutcome.valueOf(rs.getString("outcome"));
	    }
	    connection.close();
	    return null;
	} catch (Exception e) {
	    throw new RuntimeException();
	}
    }

}