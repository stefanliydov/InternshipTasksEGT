package egt.interactive.testing_framework.Test;

import java.lang.annotation.Annotation;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import egt.interactive.testing_framework.io.IO;

public abstract class Test {
    protected final Class<? extends Annotation> test;
    protected final Class<? extends Annotation> beforeTest;
    protected final Class<? extends Annotation> afterTest;
    protected final Class<? extends Annotation> dataProvider;

    public Test(final Class<? extends Annotation> test, final Class<? extends Annotation> beforeTest,
	    final Class<? extends Annotation> afterTest, final Class<? extends Annotation> dataProvider) {
	this.test = test;
	this.beforeTest = beforeTest;
	this.afterTest = afterTest;
	this.dataProvider = dataProvider;
    }

    public Map<Class<?>, TestPackage> readMethodsFromClass(final String... classes) {
	final Map<Class<?>, TestPackage> packages = new HashMap<>();
	for (String className : classes) {
	    final Class<?> clazz = getClassForName(className);
	    final TestPackage testPackage = new TestPackage();
	    final Method[] methods = clazz.getMethods();

	    for (Method method : methods) {
		int annotationsCounts = 0;

		if (isAnnotationPresent(method, test)) {
		    annotationsCounts++;

		    testPackage.addTestMethod(method);
		}
		if (isAnnotationPresent(method, beforeTest)) {
		    annotationsCounts++;
		    areAnnotationsCorrect(annotationsCounts, method);

		    testPackage.addBeforeTestMethod(method);
		}
		if (isAnnotationPresent(method, afterTest)) {
		    annotationsCounts++;
		    areAnnotationsCorrect(annotationsCounts, method);

		    testPackage.addAfterTestMethod(method);
		}
		if (isAnnotationPresent(method, dataProvider)) {
		    annotationsCounts++;
		    areAnnotationsCorrect(annotationsCounts, method);

		    testPackage.addDataProviderMethod(method);
		}
	    }
	    packages.put(clazz, testPackage);
	}
	return packages;
    }

    public void runBeforeTests(final Object obj, final List<Method> methods) {
	for (Method method : methods) {
	    try {
		method.invoke(obj);
	    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
		throw new RuntimeException(e);
	    }
	}

    }

    public Map<String, Method> getDataProviders(final Object obj, final List<Method> methods) {
	final Map<String, Method> dataProviders = new HashMap<>();
	for (Method method : methods) {
	    final Annotation annotation = method.getAnnotation(dataProvider);

	    final String dataProviderName = (String) getAnnotationValue(annotation, "name");

	    dataProviders.put(dataProviderName, method);
	}
	return dataProviders;
    }

    public void runTests(final Object obj, final List<Method> methods, final Map<String, Method> dataProviders,
	    final IO io) {
	for (Method method : methods) {
	    final Annotation annotation = method.getAnnotation(test);
	    final String dataProvider = (String) getAnnotationValue(annotation, "dataProvider");

	    @SuppressWarnings("unchecked")
	    final Class<? extends Throwable>[] expectedExceptions = (Class<? extends Throwable>[]) getAnnotationValue(
		    annotation, "expectedExceptions");

	    try {
		if (!dataProvider.equals("")) {
		    final Method dataProviderMethod = dataProviders.get(dataProvider);
		    final Object[][] objects = (Object[][]) dataProviderMethod.invoke(obj);
		    runTestWithDataProvider(obj, method, objects, expectedExceptions, io);

		} else {
		    runTest(obj, method, expectedExceptions, io);
		}
	    } catch (AssertionError | Exception e) {
		e.printStackTrace();
		io.write(String.format("FAILED: %s()", method.getName()));
	    }
	}

    }

    public void runAfterTests(final Object obj, final List<Method> methods) {
	for (Method method : methods) {
	    try {
		method.invoke(obj);
	    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
		throw new RuntimeException(e);
	    }
	}
    }

    private boolean isAnnotationPresent(final Method method, final Class<? extends Annotation> annotation) {
	if (Objects.isNull(annotation)) {
	    return false;
	}
	return method.isAnnotationPresent(annotation);
    }

    private void areAnnotationsCorrect(final int annotationsCounts, final Method method) {
	if (annotationsCounts > 1) {
	    throw new RuntimeException(method.getName() + " contains more than one test annotations");
	}

    }

    private void runTest(final Object testClass, final Method method,
	    final Class<? extends Throwable>[] expectedExceptions, final IO io) {
	try {
	    method.invoke(testClass);
	    if (expectedExceptions.length > 0) {
		throw new AssertionError("Expected exception was not thrown!");
	    }
	} catch (Exception e) {
	    boolean found = false;
	    for (Class<?> err : expectedExceptions) {
		if (err.equals(e.getCause().getClass())) {
		    found = true;
		    break;
		}
	    }
	    if (!found) {
		throw new AssertionError(e.getCause());
	    }
	}
	io.write(String.format("PASSED: %s()", method.getName()));

    }

    private Class<?> getClassForName(final String name) {
	try {
	    return Class.forName(name);
	} catch (ClassNotFoundException e) {
	    throw new RuntimeException(e);
	}
    }

    private Object getAnnotationValue(final Annotation annotation, final String methodName) {
	final Class<? extends Annotation> annotationType = annotation.annotationType();
	try {
	    final Method targetMethod = annotationType.getMethod(methodName);
	    return targetMethod.invoke(annotation);
	} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException
		| SecurityException e) {
	    throw new RuntimeException(e);
	}

    }

    private void runTestWithDataProvider(final Object testClass, final Method method, final Object[][] objects,
	    final Class<? extends Throwable>[] expectedExceptions, final IO io) {

	for (int j = 0; j < objects.length; j++) {
	    try {
		method.invoke(testClass, objects[j]);
		if (expectedExceptions.length > 0) {
		    throw new AssertionError("Expected exception was not thrown!");
		}
	    } catch (Exception e) {
		boolean found = false;
		for (Class<?> err : expectedExceptions) {
		    if (err.equals(e.getCause().getClass())) {
			found = true;
			break;
		    }
		}
		if (!found) {
		    throw new AssertionError(e.getCause());
		}
	    }
	    final String parameters = getParameters(objects[j]);
	    io.write(String.format("PASSED: %s(%s)", method.getName(), parameters));

	}
    }

    private String getParameters(final Object[] objects) {
	return String.join(", ",
		Arrays.stream(objects).map(x -> x.getClass().getCanonicalName()).collect(Collectors.toList()));
    }
}
